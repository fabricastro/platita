generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  name          String?
  password      String?
  salary        Float         @default(0)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  cardClosings  CardClosing[]
  creditCards   CreditCard[]
  expenses      Expense[]
  extraIncome   ExtraIncome[]
  savings       Saving[]
  sessions      Session[]
  wishlist      WishItem[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Expense {
  id                 String      @id @default(cuid())
  description        String
  amount             Float
  category           String
  date               DateTime
  type               String      @default("unico")
  installments       Int?
  currentInstallment Int?
  totalAmount        Float?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  userId             String
  cardId             String?
  purchaseMonth      DateTime?
  card               CreditCard? @relation(fields: [cardId], references: [id])
  user               User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("expenses")
}

model Saving {
  id          String   @id @default(cuid())
  description String
  amount      Float
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("savings")
}

model WishItem {
  id        String   @id @default(cuid())
  item      String
  price     Float
  priority  String
  saved     Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wish_items")
}

model ExtraIncome {
  id          String   @id @default(cuid())
  description String
  amount      Float
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("extra_income")
}

model CreditCard {
  id           String        @id @default(cuid())
  name         String
  bank         String
  logo         String
  color        String
  closingDay   Int
  dueDay       Int
  limit        Float?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String
  cardClosings CardClosing[]
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenses     Expense[]

  @@map("credit_cards")
}

model CardClosing {
  id          String     @id @default(cuid())
  month       Int
  year        Int
  totalAmount Float
  dueAmount   Float
  paidAmount  Float      @default(0)
  status      String     @default("pendiente")
  dueDate     DateTime
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  cardId      String
  userId      String
  card        CreditCard @relation(fields: [cardId], references: [id], onDelete: Cascade)
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("card_closings")
}
